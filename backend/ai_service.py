import os
import base64
import json
import requests
from typing import Dict, Any, Optional
from dotenv import load_dotenv, find_dotenv

def _load_env_once() -> None:
    """Ensure .env is loaded from project root if available.
    Uses find_dotenv to locate the nearest .env and loads it if not already loaded.
    """
    try:
        dotenv_path = find_dotenv(usecwd=True)
        if dotenv_path:
            load_dotenv(dotenv_path, override=False)
        else:
            # Fallback: try default loader (no-op if already loaded)
            load_dotenv(override=False)
    except Exception:
        # Do not raise here; absence of .env should not crash the service
        pass

def _get_api_keys() -> Dict[str, Optional[str]]:
    """Fetch API keys from environment at call time (not only at import time)."""
    _load_env_once()
    return {
        "openai": os.getenv("OPENAI_API_KEY"),
        "gemini": os.getenv("GEMINI_API_KEY"),
    }

# Prompt profissional para an√°lise t√©cnica
PROFESSIONAL_TRADING_PROMPT = """
Voc√™ √© um analista t√©cnico de mercado financeiro altamente especializado, com vasta experi√™ncia em an√°lise gr√°fica, padr√µes de pre√ßo, indicadores t√©cnicos e estrat√©gias de trading. Sua tarefa √© analisar uma imagem de um gr√°fico financeiro fornecida, utilizando seus conhecimentos avan√ßados para extrair o m√°ximo de informa√ß√µes e fornecer uma an√°lise completa, precisa e acion√°vel.

PROCESSO DE AN√ÅLISE PASSO A PASSO:

**PASSO 1: AN√ÅLISE DA ESTRUTURA DE MERCADO E TEND√äNCIA**
- Identifique a tend√™ncia principal (Alta, Baixa ou Lateral)
- Determine sub-tend√™ncias de menor grau
- Trace linhas de tend√™ncia (LTA/LTB)
- Marque topos e fundos relevantes

**PASSO 2: IDENTIFICA√á√ÉO DE SUPORTES E RESIST√äNCIAS**
- Detecte zonas de congest√£o
- Trace n√≠veis horizontais de suporte/resist√™ncia
- Avalie a for√ßa de cada n√≠vel
- Observe mudan√ßas de polaridade

**PASSO 3: AN√ÅLISE DE PADR√ïES DE CANDLESTICK**
- Detecte padr√µes de revers√£o (Engolfo, Martelo, Estrela Cadente, etc.)
- Identifique padr√µes de continua√ß√£o (Doji em tend√™ncia, etc.)
- Avalie confiabilidade (Alta/M√©dia/Baixa)
- Contextualize com tend√™ncia e S/R

**PASSO 4: DETEC√á√ÉO DE PADR√ïES GR√ÅFICOS CL√ÅSSICOS**
- Procure padr√µes de revers√£o (OCO, Topo/Fundo Duplo, etc.)
- Identifique padr√µes de continua√ß√£o (Tri√¢ngulos, Bandeiras, etc.)
- Projete alvos baseados na altura dos padr√µes
- Determine dire√ß√£o prov√°vel de rompimento

**PASSO 5: AN√ÅLISE DE INDICADORES T√âCNICOS VIS√çVEIS**
- Liste todos indicadores vis√≠veis (MAs, RSI, MACD, etc.)
- Interprete sinais de cada indicador
- Analise comportamento do volume
- Avalie conflu√™ncia entre indicadores

**PASSO 6: SUGEST√ÉO DE TRADING E GEST√ÉO DE RISCO**
- Determine dire√ß√£o da opera√ß√£o (Long/Short)
- Defina ponto ideal de entrada
- Calcule stop loss baseado em S/R ou ATR
- Projete take profit baseado em padr√µes
- Calcule rela√ß√£o risco-retorno

**PASSO 7: CONSIDERA√á√ïES FINAIS**
- Indique n√≠vel de confian√ßa da an√°lise
- Mencione contexto de mercado relevante
- Destaque evid√™ncias visuais principais

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON):
{
  "simbolo_detectado": "S√çMBOLO EXATO do gr√°fico",
  "preco_atual": "PRE√áO EXATO vis√≠vel",
  "timeframe_detectado": "TIMEFRAME identificado",
  "analise_tecnica": "An√°lise completa seguindo os 7 passos",
  "decisao": "compra|venda|esperar",
  "justificativa_decisao": "Justificativa detalhada baseada na conflu√™ncia",
  "confianca_percentual": 75,
  "indicadores_utilizados": ["Lista de indicadores analisados"],
  "estrutura_mercado": {
    "tendencia_principal": "Alta/Baixa/Lateral",
    "sub_tendencias": ["Tend√™ncias menores"],
    "topos_fundos": "Descri√ß√£o da estrutura"
  },
  "suportes_resistencias": {
    "suportes": [42000, 41500],
    "resistencias": [44000, 44500],
    "forca_niveis": "Avalia√ß√£o da for√ßa"
  }
}

**INSTRU√á√ïES CR√çTICAS:**
1. Analise APENAS o que est√° VIS√çVEL no gr√°fico
2. N√ÉO invente dados que n√£o consegue ver
3. Base toda an√°lise em evid√™ncias visuais concretas
4. Priorize conflu√™ncia de m√∫ltiplos sinais
5. Adapte a an√°lise ao tipo de mercado identificado
6. Forne√ßa justificativas t√©cnicas s√≥lidas
7. Responda APENAS o JSON v√°lido, sem texto adicional
"""

class AIService:
    """Servi√ßo para an√°lise de gr√°ficos usando IA"""
    
    @staticmethod
    def analyze_chart_with_openai(image_base64: str) -> Dict[str, Any]:
        """Analisa um gr√°fico usando OpenAI Vision API"""
        keys = _get_api_keys()
        OPENAI_API_KEY = keys.get("openai")
        if not OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        # Remover prefixo data:image/... se presente
        if "," in image_base64:
            image_base64 = image_base64.split(",")[1]
        
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": PROFESSIONAL_TRADING_PROMPT},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/png;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.1
        }
        
        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erro na API OpenAI: {response.status_code}")
                print(response.text)
                raise Exception(f"Erro na API OpenAI: {response.status_code}")
            
            result = response.json()
            content = result["choices"][0]["message"]["content"]
            
            # Extrair JSON da resposta
            try:
                # Tentar parsear como JSON direto
                analysis_json = json.loads(content)
            except json.JSONDecodeError:
                # Tentar extrair JSON de uma resposta que pode ter texto adicional
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    json_content = json_match.group()
                    analysis_json = json.loads(json_content)
                else:
                    raise ValueError("N√£o foi poss√≠vel extrair JSON v√°lido da resposta")
            
            return analysis_json
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise OpenAI: {e}")
            raise
    
    @staticmethod
    def analyze_chart_with_gemini(image_base64: str) -> Dict[str, Any]:
        """Analisa um gr√°fico usando Google Gemini API"""
        keys = _get_api_keys()
        GEMINI_API_KEY = keys.get("gemini")
        if not GEMINI_API_KEY:
            raise ValueError("GEMINI_API_KEY n√£o configurada")
        
        # Remover prefixo data:image/... se presente
        if "," in image_base64:
            image_base64 = image_base64.split(",")[1]
        
        headers = {
            "Content-Type": "application/json"
        }
        
        payload = {
            "contents": [{
                "parts": [
                    {
                        "text": PROFESSIONAL_TRADING_PROMPT
                    },
                    {
                        "inline_data": {
                            "mime_type": "image/jpeg",
                            "data": image_base64
                        }
                    }
                ]
            }],
            "generationConfig": {
                "temperature": 0.2,
                "maxOutputTokens": 1500,
            }
        }
        
        try:
            response = requests.post(
                f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key={GEMINI_API_KEY}",
                headers=headers,
                json=payload
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erro na API Gemini: {response.status_code}")
                print(response.text)
                raise Exception(f"Erro na API Gemini: {response.status_code}")
            
            result = response.json()
            content = result["candidates"][0]["content"]["parts"][0]["text"]
            
            # Extrair JSON da resposta
            try:
                # Tentar parsear como JSON direto
                analysis_json = json.loads(content)
            except json.JSONDecodeError:
                # Tentar extrair JSON de uma resposta que pode ter texto adicional
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    json_content = json_match.group()
                    analysis_json = json.loads(json_content)
                else:
                    raise ValueError("N√£o foi poss√≠vel extrair JSON v√°lido da resposta")
            
            return analysis_json
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise Gemini: {e}")
            raise
    
    @staticmethod
    def analyze_chart(image_base64: str) -> Dict[str, Any]:
        """Analisa um gr√°fico usando o melhor provedor dispon√≠vel"""
        keys = _get_api_keys()
        # Tentar OpenAI primeiro
        if keys.get("openai"):
            try:
                print("ü§ñ Tentando an√°lise com OpenAI...")
                return AIService.analyze_chart_with_openai(image_base64)
            except Exception as e:
                print(f"‚ö†Ô∏è Falha na an√°lise OpenAI: {e}")
        
        # Tentar Gemini como fallback
        if keys.get("gemini"):
            try:
                print("ü§ñ Tentando an√°lise com Gemini...")
                return AIService.analyze_chart_with_gemini(image_base64)
            except Exception as e:
                print(f"‚ö†Ô∏è Falha na an√°lise Gemini: {e}")
        
        # Se ambos falharem, lan√ßar erro
        raise Exception("Nenhum servi√ßo de IA dispon√≠vel para an√°lise")


